---
import { ViewTransitions } from 'astro:transitions';
import Marquee from '@/components/Marquee.astro';
import Sidebar from '@/components/Sidebar.astro';
import MobileMenu from '@/components/MobileMenu.tsx';
import PatternLines from '@/components/PatternLines.astro';
import '@/styles/global.css';

interface Props {
	title?: string;
}

const { title = "Cult of the LOLCOW" } = Astro.props;
---
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
</head>
<body>
    <Marquee />
    <div class="max-w-[1360px] mx-auto px-4 md:px-8">
        <MobileMenu client:load />
        <div class="my-10">
            <img src="/logo_full.svg" alt="Cult of the LOLCOW Logo" class="w-full h-auto" />
        </div>
        <div class="my-10">
            <PatternLines />
        </div>
        <div class="md:flex md:gap-16">
            <Sidebar />
            <main class="w-full">
                <slot />
            </main>
        </div>
    </div>

    {/* SCRIPT FOR ACTIVE LINK ON SCROLL - CORRECTED */}
    <script>
        document.addEventListener('astro:page-load', () => {
            const sections = document.querySelectorAll('main section[id]');
            const navLinks = document.querySelectorAll('.navside-list__link');

            if (!sections.length || !navLinks.length) return;

            const observer = new IntersectionObserver(entries => {
                let lastVisibleSectionId = null;

                // Find the last section that is intersecting from the top.
                for (let i = entries.length - 1; i >= 0; i--) {
                    if (entries[i].isIntersecting) {
                        lastVisibleSectionId = entries[i].target.id;
                        break;
                    }
                }
                
                navLinks.forEach(link => {
                    const href = link.getAttribute('href');
                    if (href === `#${lastVisibleSectionId}`) {
                        link.classList.add('_active');
                    } else {
                        link.classList.remove('_active');
                    }
                });

            }, {
                root: null,
                rootMargin: '-40% 0px -60% 0px',
                threshold: 0
            });

            sections.forEach(section => observer.observe(section));
        });
    </script>
</body>
</html>